#--------------------------------------------------------------------------
# Configuration
#--------------------------------------------------------------------------

# Use Vi mode
setw -g mode-keys vi

# Increase scrollback buffer size
set -g history-limit 1000000

# setw and set-window-option are the same
# Start window and pane numbering from 1 for easier switching
set -g base-index 1
setw -g pane-base-index 1

# Allow automatic renaming of windows
set -g allow-rename on
# set -g automatic-rename on
# set -g automatic-rename-format '#{b:pane_current_path}'

# blinking cursor
set-option -g cursor-style blinking-block

# Renumber windows when one is removed.
set -g renumber-windows on

# Improve colors
#set -g default-terminal "${TERM}"
set-option -g default-terminal "tmux-256color"

# Enable undercurl
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'

# Enable undercurl colors
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# Allow the mouse to resize windows and select tabs
set -g mouse on

# Allow tmux to set the terminal title
set -g set-titles on

# Monitor window activity to display in the status bar
setw -g monitor-activity on

# A bell in another window should cause a bell in the current window
set -g bell-action any

# Don't show distracting notifications
set -g visual-bell off
set -g visual-activity off

# Focus events enabled for terminals that support them
set -g focus-events on

# Useful when using sharing a session with different size terminals
setw -g aggressive-resize on

# don't detach tmux when killing a session
set -g detach-on-destroy off

# address vim mode switching delay (http://superuser.com/a/252717/65504)
set -s escape-time 0

# use system clipboard
set -g set-clipboard on

set -as terminal-features ",*:RGB"
# set -g default-terminal "tmux-256color"
set -ag terminal-overrides ",xterm-256color:RGB"

# --> Catppuccin (Mocha)
thm_bg="#1e1e2e"
thm_fg="#cdd6f4"
thm_cyan="#89dceb"
thm_black="#181825"
thm_gray="#313244"
thm_magenta="#cba6f7"
thm_pink="#f5c2e7"
thm_red="#f38ba8"
thm_green="#a6e3a1"
thm_yellow="#f9e2af"
thm_blue="#89b4fa"
thm_orange="#fab387"
thm_black4="#585b70"
thm_dark="#353545"

#--------------------------------------------------------------------------
# Status line
#--------------------------------------------------------------------------
# update status line every 2 seconds
set -g status-interval 2
set -g status-position top
# Status line customisation
set -g status-left-length 200
# set-option -g status-right-length 100
set -g status-left "#[fg=${thm_black},bg=#{?client_prefix,$thm_red,$thm_green}]   #[fg=${thm_fg},bg=default] #S "

# status-right
set -g status-right-length 100
## current directory
set -g status-right "#[fg=${thm_dark},bg=${thm_blue}]   #[fg=${thm_fg},bg=#3b4261] #{b:pane_current_path} #(gitmux -cfg $HOME/.config/tmux/gitmux.conf '#{pane_current_path}') "
## calendar 
set -ag status-right "#[fg=${thm_dark},bg=${thm_blue}] 󰃰  #[fg=${thm_fg},bg=#3b4261] %Y-%m-%d %H:%M "
## uptime
set -ag status-right "#[fg=red,dim,bg=default]#(uptime | awk -F, \'{sub(\".*up \",x,$1);print $1}\') "

## hostname
# if-shell -b 'test $(uname -s) = "Linux"' {
#   set -ag status-right "#[fg=${thm_dark},bg=${thm_blue}]  #[fg=${thm_fg},bg=#3b4261] #(hostname) "
# }
# if-shell -b 'test $(uname -s) = "Darwin"' {
#   set -ag status-right "#[fg=${thm_dark},bg=${thm_blue}]   #[fg=${thm_fg},bg=#3b4261] #(hostname | cut -f1 -d'.') "
# }

## style
set -g status-right-style "fg=#7aa2f7,bg=#3b4261,nobold,nounderscore,noitalics"

set -g status-style "fg=#7aa2f7,bg=default"
set -g @window-pre "#[fg=${thm_dark},bg=default] "

setw -g window-status-style "NONE,fg=${thm_fg},bg=default"
setw -g window-status-format         "#{@window-pre}#[fg=${thm_dark},bg=${thm_blue},bold] #I #[fg=${thm_fg},bg=#3b4261] #(icons #{pane_current_command}) #[fg=${thm_fg},bg=#3b4261,nobold,nounderscore,noitalics]#W "
setw -g window-status-current-format "#{@window-pre}#[fg=${thm_dark},bg=${thm_orange},bold] #I #(icons #{pane_current_command}) #[fg=${thm_fg},bg=#3b4261,nobold,nounderscore,noitalics] #W "

# set-option -g status-style "fg=#7C7D83 bg=#18242e" # ayu
# set-option -g status-style "fg=#7C7D83 bg=#16151d" # tokyo night
# set-option -g status-style "fg=#7C7D83 bg=#24282f" # one dark
#set-option -g status-style "fg=#7C7D83 bg=default" # gruvbox dark
# set-option -g status-style "fg=#828bb1 bg=default" # default will set the background to transparent

#set-option -g window-status-format "#{window_index}:#{window_name}#{window_flags} " # window_name -> pane_current_command
#set-option -g window-status-current-format "#{window_index}:#{window_name}#{window_flags} "
#set-option -g window-status-current-style "fg=#dcc7a0"  #for gruvbox use: dcc7a0 or aeb6ff
set-option -g window-status-activity-style none

#--------------------------------------------------------------------------
# Key Bindings
#--------------------------------------------------------------------------

# -r means that the bind can repeat without entering prefix again
# -n means that the bind doesn't use the prefix

unbind-key C-b
set -g prefix C-a

# Send prefix to a nested tmux session by doubling the prefix
bind C-a send-prefix

# 'PREFIX r' to reload of the config file
unbind r
bind r source-file $HOME/.config/tmux/tmux.conf \; display-message 'tmux.conf reloaded'
#bind r source-file $HOME/.config/tmux/tmux.conf \; display "Reloaded"

# Allow holding Ctrl when using using prefix+p/n for switching windows
bind C-p previous-window
bind C-n next-window

# Switch between previous and next windows with repeatable
bind -r n next-window
bind -r p previous-window

# Shift arrow to switch windows
bind -n S-Left  previous-window
bind -n S-Right next-window

# Move around panes like in vim
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R

# keybindings
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# Use Alt-arrow keys without prefix key to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"

# resize panes more easily
bind H resize-pane -L 5
bind L resize-pane -R 5
bind J resize-pane -D 5
bind K resize-pane -U 5

# resize panes more easily with Ctrl
bind -r C-H resize-pane -L 5
bind -r C-L resize-pane -R 5
bind -r C-J resize-pane -D 5
bind -r C-K resize-pane -U 5

# Move the current window to the next window or previous window position
bind -r N run-shell "tmux swap-window -t $(expr $(tmux list-windows | grep \"(active)\" | cut -d \":\" -f 1) + 1)"
bind -r P run-shell "tmux swap-window -t $(expr $(tmux list-windows | grep \"(active)\" | cut -d \":\" -f 1) - 1)"

# Switch between two most recently used windows
bind Space last-window

# switch between two most recently used sessions
bind b switch-client -l

# break pane out of window
bind-key B break-pane -d

# put pane back into window
bind-key E command-prompt -p "join pane from: "  "join-pane -h -s '%%'"

# allow to copy to system clipboard
bind-key y run -b "tmux show-buffer | xclip -selection clipboard"\; display-message "copied tmux buffer to system clipboard"

# open an application in a new window with prefix+o, and allow me to provide the app name
bind-key o command-prompt -p "open app: " "new-window '%%'"

# show a promp to kill a window by id with prefix+X
bind-key X command-prompt -p "kill window: " "kill-window -t '%%'"
bind-key x kill-pane # skip "kill-pane 1? (y/n)" prompt (cmd+w)

# use prefix+| (or prefix+\) to split window horizontally and prefix+- or
# (prefix+_) to split vertically also use the current pane path to define the
# new pane path
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# change the path for newly created windows
bind c new-window -c "#{pane_current_path}"

#bind C-e display-popup -E "\
#    tmux list-sessions -F '#{?session_attached,,#{session_name}}' |\
#    sed '/^$/d' |\
#    fzf --reverse --header jump-to-session |\
#    xargs tmux switch-client -t"

# sesh
bind-key "K" display-popup -E -w 40% "sesh connect \"$(
  sesh list -i | gum filter --limit 1 --placeholder 'Pick a sesh' --prompt='⚡'
)\""

# Move tmux status bar to top
#bind-key C-k run-shell "tmux set-option -g status-position top;"
# Move tmux status bar to bottom
#bind-key C-j run-shell "tmux set-option -g status-position bottom;"
# temporarily comment out since conflicts

# https://github.com/tmux-plugins/tpm
set -g @plugin 'tmux-plugins/tpm'
set -g @tpm-clean 'u' # u to uninstall plugins without Alt as default

set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'christoomey/vim-tmux-navigator'

# set -g @resurrect-capture-pane-contents 'on'
set -g @continuum-restore 'on'

set -g @plugin 'joshmedeski/tmux-fzf-url'
# open tmux-fzf-url in a tmux v3.2+ popup
set -g @fzf-url-fzf-options '-w 50% -h 50% --multi -0 --no-preview --no-border'
set -g @fzf-url-bind 'l'

run "$HOME/.config/tmux/plugins/tpm/tpm" # always at end of file
# ~/.tmux/plugins/tmux-resurrect/resurrect' returned 127 because plugins installed in different directory. By default, TPM installs plugins in a subfolder named plugins/ inside $XDG_CONFIG_HOME/tmux/ if a tmux.conf file was found at that location, or inside ~/.tmux/ otherwise.
run-shell ~/.config/tmux/plugins/tmux-resurrect/resurrect.tmux
